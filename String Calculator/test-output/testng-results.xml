<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="7" passed="7" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-10-16T20:49:17 IST" name="Default suite" finished-at="2021-10-16T20:49:17 IST" duration-ms="40">
    <groups>
    </groups>
    <test started-at="2021-10-16T20:49:17 IST" name="Default test" finished-at="2021-10-16T20:49:17 IST" duration-ms="40">
      <class name="Test.TestCalculate">
        <test-method is-config="true" signature="init()[pri:0, instance:Test.TestCalculate@27ff5d15]" started-at="2021-10-16T20:49:17 IST" name="init" finished-at="2021-10-16T20:49:17 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="emptyStringReturnsZero()[pri:0, instance:Test.TestCalculate@27ff5d15]" started-at="2021-10-16T20:49:17 IST" name="emptyStringReturnsZero" finished-at="2021-10-16T20:49:17 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- emptyStringReturnsZero -->
        <test-method signature="ignoresNumbersGreaterThanAThousand()[pri:0, instance:Test.TestCalculate@27ff5d15]" started-at="2021-10-16T20:49:17 IST" name="ignoresNumbersGreaterThanAThousand" finished-at="2021-10-16T20:49:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ignoresNumbersGreaterThanAThousand -->
        <test-method signature="negativeInputReturnsException()[pri:0, instance:Test.TestCalculate@27ff5d15]" started-at="2021-10-16T20:49:17 IST" name="negativeInputReturnsException" finished-at="2021-10-16T20:49:17 IST" duration-ms="1" status="PASS">
          <exception class="java.lang.Exception">
            <message>
              <![CDATA[Negative input]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Exception: Negative input
at Test.Calculator.illegalInput(Calculator.java:38)
at Test.Calculator.Add(Calculator.java:22)
at Test.Calculator.calculate(Calculator.java:16)
at Test.TestCalculate.negativeInputReturnsException(TestCalculate.java:38)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Exception -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeInputReturnsException -->
        <test-method signature="singleValueIsReplied()[pri:0, instance:Test.TestCalculate@27ff5d15]" started-at="2021-10-16T20:49:17 IST" name="singleValueIsReplied" finished-at="2021-10-16T20:49:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- singleValueIsReplied -->
        <test-method signature="threeNumbersDelimitedBothWaysReturnsSum()[pri:0, instance:Test.TestCalculate@27ff5d15]" started-at="2021-10-16T20:49:17 IST" name="threeNumbersDelimitedBothWaysReturnsSum" finished-at="2021-10-16T20:49:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- threeNumbersDelimitedBothWaysReturnsSum -->
        <test-method signature="twoNumbersCommaDelimitedReturnsSum()[pri:0, instance:Test.TestCalculate@27ff5d15]" started-at="2021-10-16T20:49:17 IST" name="twoNumbersCommaDelimitedReturnsSum" finished-at="2021-10-16T20:49:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoNumbersCommaDelimitedReturnsSum -->
        <test-method signature="twoNumbersNewLineDelimitedReturnsSum()[pri:0, instance:Test.TestCalculate@27ff5d15]" started-at="2021-10-16T20:49:17 IST" name="twoNumbersNewLineDelimitedReturnsSum" finished-at="2021-10-16T20:49:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoNumbersNewLineDelimitedReturnsSum -->
      </class> <!-- Test.TestCalculate -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
